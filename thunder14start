pipeline {
  agent any
  options { timestamps(); ansiColor('xterm'); timeout(time: 30, unit: 'MINUTES') }
  parameters {
    string(name: 'SERVER_IP', defaultValue: '162.19.232.192', description: 'Хост')
    string(name: 'SSH_ID', defaultValue: '162.19.232.192', description: 'Jenkins SSH creds ID')
    string(name: 'SSH_USER', defaultValue: 'ubuntu', description: 'SSH user')

    string(name: 'APP_DIR', defaultValue: '/opt/thunder-ss14/corporate-war', description: 'База приложения')
    string(name: 'BRANCH',  defaultValue: 'master', description: 'Имя инстанса/ветки')
    string(name: 'RUN_CMD', defaultValue: "exec ./run.sh --data-dir ../data", description: 'ExecStart')

    string(name: 'REPO',   defaultValue: 'https://github.com/thunder-ss14/corporate-war.git', description: 'Репозиторий')
    string(name: 'SRC_BRANCH', defaultValue: 'master', description: 'Ветка для сборки')

    string(name: 'CFG_FILE', defaultValue: '', description: 'server_config.toml, путь в воркспейсе')
    text  (name: 'CFG_FULL', defaultValue: '', description: 'или вставь полный TOML сюда')
  }

  environment {
    REPO_NAME = "${params.REPO}".replaceAll('.*/','').replaceAll(/\.git$/,'')
  }

  stages {
    stage('Take config') {
      steps {
        script {
          if (params.CFG_FILE?.trim()) { stash name: 'cfg_upload', includes: "${params.CFG_FILE}" }
          if (params.CFG_FULL?.trim())  { writeFile file: 'cfg_full.toml', text: params.CFG_FULL; stash name: 'cfg_text', includes: 'cfg_full.toml' }
        }
        script {
          catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') { unstash 'cfg_upload' }
          catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') { unstash 'cfg_text' }
        }
        sh '''#!/usr/bin/env bash
set -Ee -o pipefail   # без -u: CFG_FILE может быть пустым
CFG=''
[ -n "${CFG_FILE:-}" ] && [ -f "${CFG_FILE}" ] && CFG="${CFG_FILE}"
[ -z "$CFG" ] && [ -f cfg_full.toml ] && CFG=cfg_full.toml
[ -n "$CFG" ] || { echo "Нет TOML"; exit 2; }
cp -f "$CFG" server_config.toml
awk -F= '/^[[:space:]]*port[[:space:]]*=/{ sub(/#.*/,""); gsub(/[[:space:]]/,"",$2); if($2~/^[0-9]+$/){print $2; exit}}' server_config.toml > .port || true
'''
      }
    }

    stage('Checkout & Build') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: params.SRC_BRANCH]],
          userRemoteConfigs: [[url: params.REPO, credentialsId: 'github-token']]
        ])
        sh '''#!/usr/bin/env bash
set -Eeuo pipefail
mkdir -p artifact
# исключаем сам artifact и .git, чтобы не копировать каталог в себя
rsync -a --delete \
  --exclude '/artifact/***' \
  --exclude '/.git/***' \
  ./ artifact/.
'''
      }
    }

    stage('Deploy') {
      steps {
        sshagent(credentials: [params.SSH_ID]) {
          sh '''#!/usr/bin/env bash
set -Eeuo pipefail

SSH='ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30'
SCP='scp -o StrictHostKeyChecking=no'
HOST="${SSH_USER}@${SERVER_IP}"
APP="${APP_DIR}"
BR="${BRANCH}"
UNIT="ss14@${REPO_NAME}-${BR}.service"
DEST="$APP/$BR"

# директории
$SSH "$HOST" "sudo mkdir -p $APP/$BR/{current,data,logs} && sudo chown -R $SSH_USER:$SSH_USER $APP"

# артефакты
rsync -a --delete --exclude 'server_config.toml' -e "ssh -o StrictHostKeyChecking=no" artifact/ "$HOST:$DEST/current/"

# конфиг
$SCP server_config.toml "$HOST:$DEST/server_config.toml.tmp"
$SSH "$HOST" "mv -f $DEST/server_config.toml.tmp $DEST/server_config.toml"

# systemd шаблон
$SSH "$HOST" "sudo bash -se" <<'RS'
set -Eeuo pipefail
UNIT_FILE='/etc/systemd/system/ss14@.service'
cat >"$UNIT_FILE" <<'U'
[Unit]
Description=SS14 (%i)
After=network.target

[Service]
WorkingDirectory=/opt/thunder-ss14/corporate-war/%i/current
ExecStart=/usr/bin/bash -lc 'EXEC_RUN_CMD'
Restart=on-failure
RestartSec=5
KillSignal=SIGINT
TimeoutStopSec=45
User=ubuntu
Group=ubuntu
LimitNOFILE=65535
StandardOutput=append:/opt/thunder-ss14/corporate-war/%i/logs/server.log
StandardError=append:/opt/thunder-ss14/corporate-war/%i/logs/server.err

[Install]
WantedBy=multi-user.target
U
RS

# подстановка команды запуска и reload юнитов
RUN_CMD_LOCAL="${RUN_CMD}"
$SSH "$HOST" "sudo sed -i \"s|EXEC_RUN_CMD|${RUN_CMD_LOCAL//|/\\|}|\" /etc/systemd/system/ss14@.service && sudo systemctl daemon-reload"

# порт из TOML
if [ -f .port ]; then
  PORT="$(cat .port)"
  $SSH "$HOST" "sudo ufw allow $PORT/tcp || true; sudo ufw allow $PORT/udp || true"
fi

# запуск
$SSH "$HOST" "sudo systemctl restart $UNIT && systemctl is-active $UNIT --quiet && systemctl status $UNIT --no-pager | tail -n 20"
'''
        }
      }
    }
  }
}
