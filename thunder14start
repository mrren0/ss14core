pipeline {
  agent any
  options { timestamps(); ansiColor('xterm'); timeout(time: 30, unit: 'MINUTES') }

  parameters {
    credentials(name: 'SSH_CRED',
      description: 'ID=host (IP/DNS), Username+Key',
      defaultValue: '162.19.232.192',
      credentialType: 'com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey')

    string(name: 'BRANCH',  defaultValue: 'master', description: 'Ветка (build+deploy)')
    string(name: 'RUN_CMD', defaultValue: "exec ./run.sh --data-dir ../data", description: 'ExecStart')
    string(name: 'REPO',    defaultValue: 'https://github.com/thunder-ss14/corporate-war.git', description: 'Репозиторий')

    string(name: 'CFG_FILE', defaultValue: '', description: 'server_config.toml, путь в воркспейсе')
    text  (name: 'CFG_FULL', defaultValue: '', description: 'или вставь полный TOML сюда')
  }

  environment {
    REPO_NAME = "${params.REPO}".replaceAll('.*/','').replaceAll(/\\.git$/,'')
  }

  stages {
    stage('Take config') {
      steps {
        script {
          if (params.CFG_FILE?.trim()) { stash name: 'cfg_upload', includes: "${params.CFG_FILE}" }
          if (params.CFG_FULL?.trim())  { writeFile file: 'cfg_full.toml', text: params.CFG_FULL; stash name: 'cfg_text', includes: 'cfg_full.toml' }
        }
        script {
          catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') { unstash 'cfg_upload' }
          catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') { unstash 'cfg_text' }
        }
        sh '''#!/usr/bin/env bash
set -Ee -o pipefail
CFG=''
[ -n "${CFG_FILE:-}" ] && [ -f "${CFG_FILE}" ] && CFG="${CFG_FILE}"
[ -z "$CFG" ] && [ -f cfg_full.toml ] && CFG=cfg_full.toml
[ -n "$CFG" ] || { echo "Нет TOML"; exit 2; }
cp -f "$CFG" server_config.toml
awk -F= '/^[[:space:]]*port[[:space:]]*=/{ sub(/#.*/,""); gsub(/[[:space:]]/,"",$2); if($2~/^[0-9]+$/){print $2; exit}}' server_config.toml > .port || true
'''
      }
    }

    stage('Checkout & Build') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: params.BRANCH]],
          userRemoteConfigs: [[url: params.REPO, credentialsId: 'github-token']]
        ])
        sh '''#!/usr/bin/env bash
set -Eeuo pipefail
mkdir -p artifact
rsync -a --delete --exclude '/artifact/***' --exclude '/.git/***' ./ artifact/.
'''
      }
    }

    stage('Deploy') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: params.SSH_CRED, keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
          withEnv(["HOST_HOST=${params.SSH_CRED}"]) {
            sh '''#!/usr/bin/env bash
set -Eeuo pipefail
SSH="ssh -i \"$SSH_KEY\" -o StrictHostKeyChecking=no -o ServerAliveInterval=30"
SCP="scp -i \"$SSH_KEY\" -o StrictHostKeyChecking=no"
HOST="$SSH_USER@$HOST_HOST"

# /opt/<owner>/<repo>/<branch_sanitized>
repo_path="$(printf '%s' "${REPO}" | sed -E 's#(git@[^:]+:|https?://[^/]+/)([^/]+/[^/.]+)(\\.git)?#\\2#')"
owner="${repo_path%%/*}"; repo="${repo_path##*/}"
SAFE_BR="$(printf '%s' "${BRANCH}" | tr '/ ' '_' | tr -cd 'A-Za-z0-9._-')"
BASE="/opt/${owner}/${repo}"
DEST="${BASE}/${SAFE_BR}"
UNIT="ss14@${repo}-${SAFE_BR}.service"
ENVFILE="$DEST/.service.env"

# директории
$SSH "$HOST" "sudo mkdir -p '$DEST/{current,data,logs}' && sudo chown -R $SSH_USER:$SSH_USER '$BASE'"

# артефакты
rsync -a --delete --exclude 'server_config.toml' -e "$SSH" artifact/ "$HOST:$DEST/current/"

# конфиг
$SCP server_config.toml "$HOST:$DEST/server_config.toml.tmp"
$SSH "$HOST" "mv -f $DEST/server_config.toml.tmp $DEST/server_config.toml"

# .service.env с RUN_CMD (надёжное экранирование)
RUN_ESC=$(printf "%s" "${RUN_CMD}" | sed "s/'/'\"'\"'/g")
$SSH "$HOST" /bin/bash -se <<EOF
set -Eeuo pipefail
tmp=\$(mktemp)
printf "RUN_CMD='%s'\\n" '$RUN_ESC' > "\$tmp"
sudo mkdir -p "$DEST"
sudo chown $SSH_USER:$SSH_USER "\$tmp"
sudo mv "\$tmp" "$ENVFILE"
EOF

# systemd шаблон через sudo tee, без sed
$SSH "$HOST" BASE="$BASE" SSH_USER="$SSH_USER" /bin/bash -se <<'RS'
set -Eeuo pipefail
UNIT_FILE='/etc/systemd/system/ss14@.service'
sudo tee "$UNIT_FILE" >/dev/null <<U
[Unit]
Description=SS14 (%i)
After=network.target

[Service]
EnvironmentFile=$BASE/%i/.service.env
WorkingDirectory=$BASE/%i/current
ExecStart=/usr/bin/bash -lc "$RUN_CMD"
Restart=on-failure
RestartSec=5
KillSignal=SIGINT
TimeoutStopSec=45
User=$SSH_USER
Group=$SSH_USER
LimitNOFILE=65535
StandardOutput=append:$BASE/%i/logs/server.log
StandardError=append:$BASE/%i/logs/server.err

[Install]
WantedBy=multi-user.target
U
sudo systemctl daemon-reload
RS

# firewall из TOML
if [ -f .port ]; then
  PORT="$(cat .port)"
  $SSH "$HOST" "sudo ufw allow $PORT/tcp || true; sudo ufw allow $PORT/udp || true"
fi

# запуск и статус
$SSH "$HOST" "sudo systemctl restart $UNIT && systemctl is-active $UNIT --quiet && systemctl status $UNIT --no-pager | tail -n 20"
'''
          }
        }
      }
    }
  }
}
