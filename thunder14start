pipeline {
	agent any
  options { timestamps(); ansiColor('xterm'); durabilityHint('PERFORMANCE_OPTIMIZED'); timeout(time: 90, unit: 'MINUTES') }

  parameters {
string(name: 'BRANCH', defaultValue: 'master', description: 'Ветка деплоя')
string(name: 'REPO', defaultValue: 'https://github.com/thunder-s...s14/corporate-war.git', description: 'Git repo (https или ssh)')
    string(name: 'TARGET', defaultValue: '162.19.232.192', description: 'IP/host; также credentialsId')
    text(name: 'CFG_FULL', defaultValue: '# Welcome to the example configuration file!
                                          # Remember that if this is in bin/Content.Server or such, it may be overwritten on build.
                                          # Consider copying it and using the --config-file and --data-dir options.
                                          
                                          [log]
                                          path = "logs"
                                          format = "log_%(date)s-%(time)s.txt"
                                          level = 1
                                          enabled = false
                                          
                                          [net]
                                          tickrate = 60
                                          port = 1212
                                          bindto = "::,0.0.0.0"
                                          max_connections = 256
                                          # upnp = true
                                          
                                          [status]
                                          enabled = true
                                          bind = "*:1212"
                                          # connectaddress = "udp://thunderhub.online:1212"
                                          
                                          [game]
                                          hostname = "THUNDER"
                                          desc = "THUNDER"
                                          lobbyenabled = true
                                          maxplayers = 64
                                          soft_max_players = 64
                                          
                                          [console]
                                          loginlocal = true
                                          
                                          [hub]
                                          advertise = true
                                          tags = "hardcore, economy"
                                          server_url = "ss14://thunderhub.online:1212"
                                          hub_urls = "https://hub.spacestation14.com/"
                                          
                                          [build]
                                          # engine_version = "0.7.6"
                                          # fork_id = "abacusstation"
                                          # version = "Example1"
                                          # download_url = "http://example.com/compass.zip"
                                          # build = "E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855"
                                          
                                          [auth]
                                          # 0 = Optional, 1 = Required, 2 = Disabled
                                          mode = 1
                                          # allowlocal = true
                                          # server = "https://auth.spacestation14.com/"
                                          
                                          [database]
                                          engine = "postgres"
                                          pg_host = "127.0.0.1"
                                          pg_port = 5432
                                          pg_database = "thunder"
                                          pg_username = "rhunder"
                                          pg_password = "thunder159753"
', description: 'Полный config-server.toml')
booleanParam(name: 'FORCE_CONFIG', defaultValue: true, description: 'Перезаписывать server_config.toml при деплое')
  }

  environment {
		DOTNET_CLI_TELEMETRY_OPTOUT = '1'
    GIT_TERMINAL_PROMPT = '0'
    MSBUILDDISABLENODEREUSE = '1'
    DOTNET_CLI_HOME = "${WORKSPACE}/.dotnet_home"
    MSBUILDDEBUGPATH = "${WORKSPACE}/msbuild-logs"
  }

  stages {
		stage('Checkout + Submodules') {
			steps {
				withCredentials([string(credentialsId: 'token-github', variable: 'GITHUB_TOKEN')]) {
					sh '''#!/usr/bin/env bash
set -euo pipefail
rm -rf src
cat > askpass.sh <<'EOS'
#!/bin/sh
case "$1" in
  *Username*) echo "x-access-token" ;;
  *Password*) echo "$GITHUB_TOKEN" ;;
esac
EOS
chmod +x askpass.sh
GIT_ASKPASS="$PWD/askpass.sh" git clone --recursive https://github.com/thunder-ss14/corporate-war src
cd src
git checkout "${BRANCH}"
git submodule sync --recursive
GIT_ASKPASS="$PWD/../askpass.sh" git -c protocol.version=2 submodule update --init --recursive
'''
				}
			}
		}

    stage('.NET SDK (local)') {
			steps {
				sh '''#!/usr/bin/env bash
set -euo pipefail
mkdir -p .dotnet "$DOTNET_CLI_HOME" "$MSBUILDDEBUGPATH"
curl -fsSL --retry 8 --retry-all-errors --retry-delay 2 -o dotnet-install.sh https://dot.net/v1/dotnet-install.sh
bash dotnet-install.sh --install-dir "$PWD/.dotnet" --channel 9.0
export PATH="$PWD/.dotnet:$PATH"
dotnet --info
'''
      }
    }

    stage('Restore (retry)') {
			steps {
				sh '''#!/usr/bin/env bash
set -Eeuo pipefail
export PATH="$PWD/.dotnet:$PATH"
cd src
dotnet nuget locals all --clear || true
for i in 1 2 3; do
  stdbuf -oL -eL dotnet restore --no-cache && s=0 && break || s=$?
  echo "restore retry $i failed with $s"; sleep $((5*i))
done
[ "${s:-0}" -eq 0 ]
'''
      }
    }

    stage('Build & Package') {
			steps {
				retry(2) {
					sh '''#!/usr/bin/env bash
set -Eeuo pipefail
export PATH="$PWD/.dotnet:$PATH"
cd src
( while true; do echo "[keepalive] $(date -Iseconds) build alive"; sleep 55; done ) & KA=$!
trap 'kill $KA 2>/dev/null || true; dotnet build-server shutdown || true' EXIT
stdbuf -oL -eL dotnet publish Content.Server -c Release -o ../artifact
test -x ../artifact/Robust.Server
'''
				}
			}
		}

    stage('Deploy via SSH') {
			steps {
        script { if (params.CFG_FULL?.trim()) { writeFile file: 'cfg_full.toml', text: params.CFG_FULL } }
				withCredentials([sshUserPrivateKey(credentialsId: params.TARGET, keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
					sh '''#!/usr/bin/env bash
set -Eeuo pipefail
SSH_OPTS="-o StrictHostKeyChecking=no -o ServerAliveInterval=30 -o ServerAliveCountMax=120 -i \"$SSH_KEY\""
esc() { printf '%s' "$1" | sed -e 's/\\\\/\\\\\\\\/g' -e 's/"/\\\\\\"/g'; }

repo_path="$(printf '%s' "${REPO}" | sed -E 's#(git@github.com:|https://github.com/)([^/]+)/([^/.]+)(\\.git)?#\\2/\\3#')"
owner="${repo_path%/*}"
repo="${repo_path##*/}"
safe_branch="$(printf '%s' "${BRANCH}" | tr -c 'a-zA-Z0-9._-' '_')"
DEST="/opt/${owner}/${repo}/${safe_branch}"
UNIT="ss14@${safe_branch}.service"

# ensure dest
ssh $SSH_OPTS "${SSH_USER}@${TARGET}" "sudo mkdir -p '${DEST}' '{${DEST}/logs,${DEST}/data}' && sudo chown -R ${SSH_USER}:${SSH_USER} '${DEST}'"

# firewall open (tcp/udp)
if ssh $SSH_OPTS "${SSH_USER}@${TARGET}" "command -v ufw >/dev/null 2>&1"; then
  ssh $SSH_OPTS "${SSH_USER}@${TARGET}" "sudo ufw allow ${PORT}/tcp || true; sudo ufw allow ${PORT}/udp || true"
elif ssh $SSH_OPTS "${SSH_USER}@${TARGET}" "command -v firewall-cmd >/dev/null 2>&1"; then
  ssh $SSH_OPTS "${SSH_USER}@${TARGET}" "sudo firewall-cmd --permanent --add-port=${PORT}/tcp || true; sudo firewall-cmd --permanent --add-port=${PORT}/udp || true; sudo firewall-cmd --reload || true"
else
  ssh $SSH_OPTS "${SSH_USER}@${TARGET}" "sudo iptables -I INPUT -p tcp --dport ${PORT} -j ACCEPT || true; sudo iptables -I INPUT -p udp --dport ${PORT} -j ACCEPT || true"
fi

# upload binaries
rsync -a --delete --exclude 'server_config.toml' --exclude 'data' -e "ssh $SSH_OPTS" artifact/ "${SSH_USER}@${TARGET}:${DEST}/"

# base config (включая desc)
tmpdir="$(mktemp -d)"; cfg="$tmpdir/server_config.toml"
SERVER_NAME_E="$(esc "$SERVER_NAME")"
SERVER_DESC_E="$(esc "$SERVER_DESC")"
HUB_TAGS_E="$(esc "$HUB_TAGS")"

# если передан полный конфиг — используем его
if [ -f "$WORKSPACE/cfg_full.toml" ]; then
  cp "$WORKSPACE/cfg_full.toml" "$cfg"
else
cat >"$cfg" <<EOF
[net]
tickrate = ${TICKRATE}
port = ${PORT}

[game]
hostname = "${SERVER_NAME_E}"
desc = "${SERVER_DESC_E}"
lobbyenabled = ${LOBBYENABLED}
maxplayers = ${MAX_PLAYERS}
soft_max_players = ${SOFT_MAX_PLAYERS}

[auth]
mode = ${AUTH_MODE}

[hub]
advertise = true
tags = "${HUB_TAGS_E}"
EOF

[ -n "${SERVER_DOMAIN:-}" ] && printf 'server_url = "ss14://%s:%s"\\n' "${SERVER_DOMAIN}" "${PORT}" >> "$cfg"

cat >>"$cfg" <<EOF
[status]
bind = "*:${PORT}"
EOF

if [ "${DB_ENGINE:-sqlite}" = "postgres" ]; then
cat >>"$cfg" <<EOF
[database]
engine = "postgres"
host = "${PG_HOST}"
port = ${PG_PORT}
db = "${PG_DB}"
username = "${PG_USER}"
password = "${PG_PASS}"
EOF
else
cat >>"$cfg" <<EOF
[database]
engine = "sqlite"
path = "ServerData/sqlite.db"
EOF
fi
fi

# systemd unit
unit_local="$tmpdir/${UNIT}"
cat >"$unit_local" <<EOF
[Unit]
Description=SS14 ${safe_branch} server
After=network-online.target
Wants=network-online.target

[Service]
User=${SSH_USER}
Group=${SSH_USER}
WorkingDirectory=${DEST}
ExecStart=${DEST}/Robust.Server
Restart=always
RestartSec=3
StandardOutput=append:${DEST}/logs/server.log
StandardError=append:${DEST}/logs/server.err

[Install]
WantedBy=multi-user.target
EOF

# push config + unit
if [ "${FORCE_CONFIG:-true}" = "true" ]; then
  rsync -a -e "ssh $SSH_OPTS" "$cfg" "${SSH_USER}@${TARGET}:${DEST}/server_config.toml"
fi
rsync -a -e "ssh $SSH_OPTS" "$unit_local" "${SSH_USER}@${TARGET}:/etc/systemd/system/${UNIT}"

# enable + restart
ssh $SSH_OPTS "${SSH_USER}@${TARGET}" "sudo systemctl daemon-reload && sudo systemctl enable ${UNIT} --now && sudo systemctl restart ${UNIT} && systemctl status ${UNIT} --no-pager || true"
ssh $SSH_OPTS "${SSH_USER}@${TARGET}" "pgrep -af Robust.Server || pgrep -af Content.Server || true"
'''
				}
			}
		}
  }

  post {
    success { echo 'DONE' }
    failure { echo 'FAILED' }
    always  { echo 'END' }
  }
}
